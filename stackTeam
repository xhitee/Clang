1. 스택의 정의:
스택은 한쪽 끝에서만 자료의 삽입과 삭제가 이루어지는 선형 자료구조입니다.
이를테면, 책을 쌓아놓은 것처럼 가장 위에 있는 자료만 접근할 수 있습니다.
이러한 특성을 후입선출(LIFO, Last-In-First-Out)이라고 합니다. 스택은 주로 배열이나 연결리스트로 구현됩니다.

2. 스택의 응용:
스택은 다양한 응용 분야에서 활용됩니다. 주요한 응용 분야는 다음과 같습니다:
- 함수 호출: 함수 호출 시 호출된 함수의 정보를 스택에 저장하고,
  함수의 실행이 끝나면 스택에서 해당 정보를 제거하여 함수 호출의 순서를 관리합니다.
- 괄호 검사: 괄호의 쌍이 올바르게 열고 닫혔는지 확인할 때 스택을 사용합니다.
  열린 괄호는 스택에 삽입하고, 닫힌 괄호를 만날 때 스택에서 짝이 맞는 열린 괄호를 꺼내는 방식으로 검사합니다.
- 웹 브라우저 뒤로 가기: 웹 브라우저의 뒤로 가기 기능은 스택을 사용하여 방문한 웹 페이지의 히스토리를 관리합니다.
  새로운 페이지 방문 시 스택에 추가하고, 뒤로 가기 버튼을 누를 때 스택에서 가장 최근에 방문한 페이지를 꺼내어 이동합니다.

3. 스택의 구현:
스택은 배열 또는 연결리스트로 구현할 수 있습니다. 각각의 구현 방식은 장단점이 있으며, 상황에 따라 선택할 수 있습니다.

- 배열을 사용한 구현: 스택의 크기를 미리 정해놓고 배열로 구현하는 방식입니다.
  배열의 인덱스를 이용하여 스택의 상단(top)을 표현하고, 삽입과 삭제 연산은 배열의 인덱스를 조정하여 수행합니다.
  배열을 사용하므로 메모리 공간이 연속적으로 할당되어야 하며, 크기가 고정되어 확장이 어려운 단점이 있습니다.

- 연결리스트를 사용한 구현: 동적 메모리 할당을 통해 노드들을 연결하여 구현하는 방식입니다.
  각 노드는 데이터와 다음 노드를 가리키는 포인터로 구성됩니다.
  연결리스트를 사용하므로 크기가 동적으로 조정될 수 있으며, 메모리 공간이 연속적이지 않아도 되는 장점이 있습니다.
  하지만 포인터를 사용하기 때문에 메모리 오버헤드가 있을 수 있습니다.

스택의 구현은 프로그래밍 언어의 지원에 따라 다양한 방식으로 이루어질 수 있으며,
언어에 따라 스택을 구현하는 라이브러리나 내장 함수가 제공될 수도 있습니다.
-------------------------------------------------------------------------------------------
소감
백지은
- 스택에 대해 연구하면서 스택의 정의, 응용 및 구현 방식에 대해 더 깊이 이해할 수 있었습니다.
  스택은 후입선출 방식으로 동작하며, 주로 함수 호출, 괄호 검사, 웹 브라우저 뒤로 가기 등 다양한 응용 분야에서 사용됨을 알게 되었습니다.
  또한, 스택을 배열 또는 연결리스트로 구현할 수 있다는 것을 알게 되었는데, 배열은 크기가 고정되어 확장이 어렵지만 메모리 연속성이 유리하며,
  연결리스트는 크기가 동적으로 조정되고 메모리 연속성에 제약이 없는 장점을 가지고 있음을 알게 되었습니다.
  스택의 구현은 프로그래밍 언어에 따라 다양한 방식으로 이루어질 수 있으며,
  언어가 제공하는 라이브러리나 내장 함수를 활용할 수도 있다는 것을 알게 되었습니다.
  이번 과제를 통해 스택의 개념과 활용에 대해 더욱 흥미를 갖게 되었고,
  앞으로 스택을 활용한 다양한 문제들을 해결해 나갈 자신감을 가지게 되었습니다.

임민섭
-

백승환
-

명재훈
-




